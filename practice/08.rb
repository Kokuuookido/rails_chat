puts 1 < 2 # true と表示されます
# putsメッソッドに数学（キ厳密には違うが）の不等式続けるだけで、真・偽判断してくれる。
puts 1 > 20 # false と表示されます
# 1は20より大きいのは、ウソなので、偽でコンソールに返す。

deposit = 1000
if deposit < 2000
  puts "残高が足りません"
end
# 状況の文脈としては、2000円をATMから出金しようとした際に、残高を確認するコード
# rubyでは、不等式を入れるだけで、putsメッソッドであれ、if文であれ、真偽を判断してくれる。

deposit = 1000
puts "残高が足りません" if deposit < 2000   #後置if

# 1個上の書き方: 読みやすく、特に複雑な条件や複数の処理がある場合に適しています。
# この書き方: シンプルで短いコードを好む場合に適しています。条件が簡単で、結果が単一のステートメントである場合に特に有用です。

puts 1 == 1 # true
puts 1 != 1 # false
puts 1 != 2 # true

# puts 1 == 1 は、1が1と等しいかどうかをチェックします。この場合、条件は真（true）なので、コンソールには true と表示されます。
# puts 1 != 1 は、1が1と等しくないかどうかをチェックします。この場合、条件は等しいのでウソであり偽（false）なので、コンソールには false と表示されます。
# puts 1 != 2 は、1が2と等しくないかどうかをチェックします。この場合、条件は真（true）なので、コンソールには true と表示されます。
# puts 1 ! = 2 は文法エラーです。正しくは != を使います。

puts 100 >= 100 # true
puts 100 <= 100 # true
puts 100 > 100  # false
puts 100 < 100  # false

# puts 100 >= 100 は、100が100以上かどうかをチェックします。この場合、100以上は、100も含むから（true）なので、コンソールには true と表示されます。
# puts 100 <= 100 は、100が100以下かどうかをチェックします。この場合、100以下は、100も含むから条件は真（true）なので、コンソールには true と表示されます。
# puts 100 > 100 は、100が100より大きいかどうかをチェックします。この場合、100より大きい数の集合に100は含まれないから、ウソで条件は偽（false）なので、コンソールには false と表示されます。
# puts 100 < 100 は、100が100より小さいかどうかをチェックします。この場合、100より小さい数の集合に100は含まれないから、ウソで条件は偽（false）なので、コンソールには false と表示されます。

puts "ruby" == "ruby"  # true
puts "ruby" != "ruby"  # false
puts "ruby" == "go"    # false

# 文字列の真偽
